import unittest
from unittest.mock import patch
from datetime import datetime
from app import WeatherETL  

class TestWeatherETL(unittest.TestCase):

    @patch('app.requests.get')
    def test_get_openweather_data_success(self, mock_get):
  
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {'main': {'temp': 30}}

        etl_processor = WeatherETL()
        city = 'TestCity'
        data = etl_processor.get_openweather_data(city)

        self.assertIsNotNone(data)
        self.assertEqual(data['main']['temp'], 30)

    @patch('app.requests.get')
    def test_get_openweather_data_failure(self, mock_get):
        mock_get.return_value.status_code = 404

        etl_processor = WeatherETL()
        city = 'TestCity'
        data = etl_processor.get_openweather_data(city)

        self.assertIsNone(data)

    @patch('app.WeatherETL.determine_usage')
    @patch('app.MongoClient')
    def test_etl_to_mongodb(self, mock_mongo_client, mock_determine_usage):
        mock_collection = mock_mongo_client.return_value.etl_db.weather_data

        etl_processor = WeatherETL()

      
        mock_determine_usage.return_value = 'TestUsage'

        
        fixed_datetime = datetime(2023, 1, 1, 12, 0, 0)
        with patch('app.datetime') as mock_datetime:
            mock_datetime.now.return_value = fixed_datetime

           
            test_data = {'main': {'temp': 30}}
            test_city = 'TestCity'
            etl_processor.etl_to_mongodb(test_data, test_city)

            
            mock_collection.insert_one.assert_called_once_with({
                'Data da Ingestão': fixed_datetime,
                'Cidade': test_city,
                'Tipo': 'Condições Meteorológicas',
                'Valores': test_data,
                'Uso': 'TestUsage'
            })

if __name__ == '__main__':
    unittest.main()
